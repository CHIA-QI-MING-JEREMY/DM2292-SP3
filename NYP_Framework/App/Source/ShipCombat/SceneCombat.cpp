/**
 CScene2D
 @brief A class which manages the 2D game scene
 By: Toh Da Jun
 Date: Mar 2020
 */
#include "SceneCombat.h"
#include <iostream>
using namespace std;

// Include Shader Manager
#include "RenderControl\ShaderManager.h"

#include "System\filesystem.h"

/**
 @brief Constructor This constructor has protected access modifier as this class will be a Singleton
 */
CSceneCombat::CSceneCombat(void)
	: cMap2D(NULL)
	, cPlayer2D(NULL)
	, cKeyboardController(NULL)	
	, cGUI_SceneCombat(NULL)
	, cGameManager(NULL)
	, camera2D(NULL)
	, cSoundController(NULL)
{
}

/**
 @brief Destructor
 */
CSceneCombat::~CSceneCombat(void)
{
	if (cKeyboardController)
	{
		// We won't delete this since it was created elsewhere
		cKeyboardController = NULL;
	}

	if (cMap2D)
	{
		cMap2D->Destroy();
		cMap2D = NULL;
	}

	if (cPlayer2D)
	{
		cPlayer2D->Destroy();
		cPlayer2D = NULL;
	}
	
	if (camera2D)
	{
		camera2D->Destroy();
		camera2D = NULL;
	}

	if (cGUI_SceneCombat)
	{
		cGUI_SceneCombat->Destroy();
		cGUI_SceneCombat = NULL;
	}

	if (cGameManager)
	{
		cGameManager->Destroy();
		cGameManager = NULL;
	}

	if (cSoundController)
	{
		cSoundController = NULL;
	}
}

/**
@brief Init Initialise this instance
*/ 
bool CSceneCombat::Init(void)
{
	// Include Shader Manager
	CShaderManager::GetInstance()->Use("Shader2D");
	
	// Create and initialise the cMap2D
	cMap2D = CMap2D::GetInstance();
	// Set a shader to this class
	cMap2D->SetShader("Shader2D");
	// Initialise the instance
	if (cMap2D->Init(1, CSettings::GetInstance()->NUM_TILES_YAXIS, CSettings::GetInstance()->NUM_TILES_XAXIS) == false)
	{
		cout << "Failed to load CMap2D" << endl;
		return false;
	}
	// Load the map into an array
	if (cMap2D->LoadMap("Maps/DM2213_Map_Ship.csv", 0) == false)
	{
		// The loading of a map has failed. Return false
		cout << "Failed to load Ship Layout" << endl;
		return false;
	}

	// Create and initialise the CPlayer2D
	cPlayer2D = CShipPlayer::GetInstance();
	// Pass shader to cPlayer2D
	cPlayer2D->SetShader("Shader2D_Colour");
	// Initialise the instance
	if (cPlayer2D->Init() == false)
	{
		cout << "Failed to load CPlayer2D" << endl;
		return false;
	}

	cMap2D->SetCurrentLevel(0); //reset level
	cMap2D->SetMapInfo(cPlayer2D->vec2Index.y, cPlayer2D->vec2Index.x, 598);

	// Initialise the Physics
	cPhysics2D.Init();

	// Create and initialise the CGUI_Scene2D
	cGUI_SceneCombat = CGUI_SceneCombat::GetInstance();
	// Initialise the instance
	if (cGUI_SceneCombat->Init() == false)
	{
		cout << "Failed to load CGUI_Scene2D" << endl;
		return false;
	}

	// Store the keyboard controller singleton instance here
	cKeyboardController = CKeyboardController::GetInstance();

	// Create and initialise the cGameManager
	cGameManager = CGameManager::GetInstance();
	cGameManager->Init();
	
	// Init the camera
	camera2D = Camera2D::GetInstance();
	camera2D->Reset();
	camera2D->setTargetPos(glm::vec2(cPlayer2D->vec2Index.x * cPlayer2D->vec2NumMicroSteps.x, cPlayer2D->vec2Index.y * cPlayer2D->vec2NumMicroSteps.y));
	camera2D->setTargetZoom(2.0f);

	NoiseStartTime = 0.0f;
	TimeElapsed = 0.0f;
	lState = false;
	blockSelected = glm::vec2(0, 0);
	numOfEncounters = rand() % 2 + 1;
	goToPlatform = false;

	// Audio Stuff

	return true;
}

/**
@brief Update Update this instance
*/
bool CSceneCombat::Update(const double dElapsedTime)
{
	//cGUI_Scene2D->setPlanetNum(1);
	// mouse Position demo
	glm::vec2 camPos = glm::vec2(camera2D->getMousePosition().x - (cPlayer2D->vec2Index.x + cPlayer2D->vec2NumMicroSteps.x / CSettings::GetInstance()->NUM_STEPS_PER_TILE_XAXIS), camera2D->getMousePosition().y - (cPlayer2D->vec2Index.y + cPlayer2D->vec2NumMicroSteps.y / CSettings::GetInstance()->NUM_STEPS_PER_TILE_YAXIS));
	camPos = glm::normalize(camPos);
	camPos = glm::vec2(cPlayer2D->vec2Index.x + camPos.x, cPlayer2D->vec2Index.y + camPos.y);

	camera2D->setTargetPos(camPos);
	camera2D->Update(dElapsedTime);
	TimeElapsed += 0.0167;

	// TODO: [SP3] Make this generated by randomness x
	if (cKeyboardController->IsKeyDown(GLFW_KEY_X)) {
		SetDamage(cPlayer2D->vec2Index);
	}
	if ((TimeElapsed - NoiseStartTime) > kScreenShakeLength) {
		camera2D->noiseOn = false;
		NoiseStartTime = 0;
	}

	if (CMouseController::GetInstance()->IsButtonUp(CMouseController::BUTTON_TYPE::LMB) && lState) {
		lState = false;
	}

	// resolve if changes to gui are made
	if (cGUI_SceneCombat->makeChanges && cGUI_SceneCombat->GuiState == CGUI_SceneCombat::GUI_STATE::showRepair) {
		cMap2D->SetMapInfo(blockSelected.y, blockSelected.x, 598);
		cGUI_SceneCombat->GuiState = CGUI_SceneCombat::GUI_STATE::noShow;
		cGUI_SceneCombat->makeChanges = false;
	}
	if (cGUI_SceneCombat->makeChanges && cGUI_SceneCombat->GuiState == CGUI_SceneCombat::GUI_STATE::showExit) {
		goToPlatform = true;
		cGUI_SceneCombat->GuiState = CGUI_SceneCombat::GUI_STATE::noShow;
		cGUI_SceneCombat->makeChanges = false;
	}


	if (CMouseController::GetInstance()->IsButtonDown(0) && !lState) {
		lState = true;
		PlayerInteractWithMap(camera2D->getBlockSelected());

	}

	std::cout << numOfEncounters << "\n";
	if (cKeyboardController->IsKeyPressed(GLFW_KEY_V)) {
		numOfEncounters--;
	}
	if (numOfEncounters <= 0) {
		cMap2D->SetMapInfo(7, 16, 1222, false);
	}

	// Call the cPlayer2D's update method before Map2D
	// as we want to capture the inputs before Map2D update
	cPlayer2D->Update(dElapsedTime);
	

	// Call all of the cEnemy2D's update methods before Map2D
	// as we want to capture the updates before Map2D update

	// Call the Map2D's update method
	cMap2D->Update(dElapsedTime);

	// Get keyboard updates
	if (cKeyboardController->IsKeyReleased(GLFW_KEY_F1))
	{
		cSoundController->MasterVolumeIncrease();
	}
	else if (cKeyboardController->IsKeyReleased(GLFW_KEY_F2))
	{
		cSoundController->MasterVolumeDecrease();
	}

	if (cKeyboardController->IsKeyReleased(GLFW_KEY_F6))
	{
		// Save the current game to a save file
		// Make sure the file is open
		try {
			if (cMap2D->SaveMap("Maps/DM2213_SAVEGAME.csv", cMap2D->GetCurrentLevel()) == false)
			{
				throw runtime_error("Unable to save the current game to a file");
			}
		}
		catch (runtime_error e)
		{
			cout << "Runtime error: " << e.what();
			return false;
		}
	}

	// Call the cGUI_Scene2D's update method
	cGUI_SceneCombat->Update(dElapsedTime);

	// Check if the game should go to the next level
	if (cGameManager->bLevelCompleted == true)
	{
		//cMap2D->SetCurrentLevel(cMap2D->GetCurrentLevel() + 1);
		cGameManager->bLevelCompleted = false;
	}

	return true;
}

/**
 @brief PreRender Set up the OpenGL display environment before rendering
 */
void CSceneCombat::PreRender(void)
{
	// Reset the OpenGL rendering environment
	glLoadIdentity();

	// Clear the screen and buffer
	glClearColor(0.5f, 0.5f, 0.5f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);

	// Enable 2D texture rendering
	glEnable(GL_TEXTURE_2D);
}

/**
 @brief Render Render this instance
 */
void CSceneCombat::Render(void)
{
	// Calls the Map2D's PreRender()
	cMap2D->PreRender();
	// Calls the Map2D's Render()
	cMap2D->Render();
	// Calls the Map2D's PostRender()
	cMap2D->PostRender();

	// Calls the CPlayer2D's PreRender()
	cPlayer2D->PreRender();
	// Calls the CPlayer2D's Render()
	cPlayer2D->Render();
	// Calls the CPlayer2D's PostRender()
	cPlayer2D->PostRender();

	// Calls the CGUI_Scene2D's PreRender()
	cGUI_SceneCombat->PreRender();
	// Calls the CGUI_Scene2D's Render()
	cGUI_SceneCombat->Render();
	// Calls the CGUI_Scene2D's PostRender()
	cGUI_SceneCombat->PostRender();
}

/**
 @brief PostRender Set up the OpenGL display environment after rendering.
 */
void CSceneCombat::PostRender(void)
{
}

int CSceneCombat::getNumEncounters(void)
{
	return numOfEncounters;
}


void CSceneCombat::PlayerInteractWithMap(glm::vec2 position)
{
	switch (cMap2D->GetMapInfo(position.y, position.x))
	{
	case 597:
		// TODO: add resource consumption
		cGUI_SceneCombat->GuiState = CGUI_SceneCombat::GUI_STATE::showRepair;
		blockSelected = position;
		break;

	case 1222:
		cGUI_SceneCombat->GuiState = CGUI_SceneCombat::GUI_STATE::showExit;
		break;
	default:
		break;
	}
}

void CSceneCombat::SetDamage(glm::vec2 position)
{
	if (camera2D->noiseOn == false) {
		camera2D->noiseOn = true;
		NoiseStartTime = TimeElapsed;
		cMap2D->SetMapInfo(position.y, position.x, 597);
	}
}

